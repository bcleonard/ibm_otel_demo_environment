# Do not use this configuration in production.
# It is for demonstration purposes only.
# Run Mimir in single process mode, with all components running in 1 process.
target: all,alertmanager,overrides-exporter

# Configure Mimir to use Minio as object storage backend.
common:
  storage:
    backend: s3
    s3:
      endpoint: minio:9000
      access_key_id: mimir
      secret_access_key: supersecret
      insecure: true
      bucket_name: mimir

# Blocks storage requires a prefix when using a common object storage bucket.
blocks_storage:
  storage_prefix: blocks
  tsdb:
    dir: /data/ingester

# Use memberlist, a gossip-based protocol, to enable the 3 Mimir replicas to communicate
memberlist:
  join_members: [mimir-1, mimir-2, mimir-3]

ruler:
  rule_path: /data/ruler
  alertmanager_url: http://127.0.0.1:8080/alertmanager
  ring:
    # Quickly detect unhealthy rulers to speed up the tutorial.
    heartbeat_period: 2s
    heartbeat_timeout: 10s

alertmanager:
  data_dir: /data/alertmanager
  fallback_config_file: /etc/alertmanager-fallback-config.yaml
  external_url: http://localhost:9009/alertmanager

server:
  log_level: warn

limits:
  # Allow ingestion of out-of-order samples up to 10 minutes since the latest received sample for the series.
  out_of_order_time_window: 10m
  # Per-tenant ingestion rate limit in samples per second.
  # CLI flag: -distributor.ingestion-rate-limit
  #[ingestion_rate: <float> | default = 10000]
  ingestion_rate: 30000

  # Per-tenant allowed ingestion burst size (in number of samples).
  # CLI flag: -distributor.ingestion-burst-size
  #[ingestion_burst_size: <int> | default = 200000]


  # per-user tenant series limit
  #[max_global_series_per_user: <int> | default = 1500000]
  max_global_series_per_user: 2000000

